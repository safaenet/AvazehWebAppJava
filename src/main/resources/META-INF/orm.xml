<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd"
                version="2.2">
    <named-query name="customerBalance">
        <query>
            <![CDATA[
                SELECT SUM(result)
                FROM (
                    SELECT 
                        CASE 
                            WHEN i.discountType = DiscountTypes.PERCENT THEN 
                                COALESCE(SUM(ii.countValue * ii.sellPrice), 0) - (i.discountValue / 100 * SUM(ii.countValue * ii.sellPrice)) - COALESCE(SUM(ip.payAmount), 0)
                            ELSE 
                                COALESCE(SUM(ii.countValue * ii.sellPrice), 0) - i.discountValue - COALESCE(SUM(ip.payAmount), 0)
                        END as result
                    FROM InvoiceModel i 
                    LEFT JOIN i.customer c
                    LEFT JOIN i.items ii
                    LEFT JOIN i.payments ip
                    WHERE c.id = :cId
                    GROUP BY i.id
                ) as subquery
            ]]>
        </query>
    </named-query>

    <named-native-query name = "findInvoiceListByMany" result-set-mapping="InvoiceListMapping">
        <query>
            <![CDATA[
                CREATE OR REPLACE FUNCTION calcInvoiceSellSum(invId BIGINT) RETURNS BIGINT AS $$
                BEGIN
                    RETURN COALESCE(ROUND(
                        CASE
                        WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) --Percent
                        WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue --Amount
                        END), 0)
                    FROM invoices i
                    LEFT JOIN invoiceitems ii ON ii.invoiceid = i.id
                    WHERE i.id = invId
                    GROUP BY i.id;
                END;
                $$ LANGUAGE plpgsql;

                CREATE OR REPLACE FUNCTION calcInvoicePaySum(invId BIGINT) RETURNS BIGINT AS $$
                BEGIN
                    RETURN COALESCE(SUM(ip.payamount), 0)
                    FROM invoices i
                    LEFT JOIN invoicepayments ip ON ip.invoiceid = i.id
                    WHERE i.id = invId
                    GROUP BY i.id;
                END;
                $$ LANGUAGE plpgsql;

                CREATE OR REPLACE FUNCTION calcInvoicePrevBalance(invId BIGINT) RETURNS BIGINT AS $$
                BEGIN
                    IF (SELECT i.previnvoiceid FROM invoices i WHERE i.id = invId) IS NULL THEN RETURN 0;
                    ELSE RETURN
                        calcInvoiceSellSum((SELECT previnvoiceid FROM invoices WHERE id = invId)) -
                        calcInvoicePaySum((SELECT previnvoiceid FROM invoices WHERE id = invId)) +
                        calcInvoicePrevBalance((SELECT previnvoiceid FROM invoices WHERE id = invId));
                    END IF;
                END;
                $$ LANGUAGE plpgsql;
                
                SELECT i.id, i.customer_id AS customerId, c.fullname AS customerFullName, i.about, i.datecreated, i.dateupdated, i.descriptions,
                calcInvoiceSellSum(i.id) AS totalInvoiceSum, calcInvoicePaySum(i.id) AS totalInvoicePayments, i.previnvoiceid, calcInvoicePrevBalance(i.id) AS prevInvoiceBalance, InvFwds.fwdFactorNum AS fwdInvoiceId
                FROM invoices i
                INNER JOIN customers c ON i.customer_id = c.id
                LEFT JOIN (SELECT baseI.id AS FactorNum, prevI.id AS fwdFactorNum FROM invoices baseI LEFT JOIN invoices prevI ON baseI.id = prevI.previnvoiceid) AS InvFwds ON InvFwds.FactorNum = i.id
                WHERE
                    ((:customerId > 0 AND i.customer_id = :customerId) OR :customerId <= 0) AND
                    (i.datecreated LIKE :invoiceDate OR i.dateupdated LIKE :invoiceDate) AND

                    (
                        (:invoiceStatus = 'BALANCED' AND i.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance = 0) OR
                        (:invoiceStatus = 'DEPTOR' AND i.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance > 0) OR
                        (:invoiceStatus = 'CREDITOR' AND i.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance < 0) OR
                        (:invoiceStatus = 'OVERDUE' AND i.fwdInvoiceId IS NULL AND ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance <> 0) OR
                        (:invoiceStatus = 'ALL')
                    ) AND

                    (
                        UPPER(ih.customerFullName) LIKE :searchText OR 
                        UPPER(ih.about) LIKE :searchText OR 
                        UPPER(ih.descriptions) LIKE :searchText
                    ) 
            ]]>
        </query>
    </named-native-query>

    <!-- <named-native-query name = "findInvoiceListByMany" result-set-mapping="InvoiceListMapping">
        <query>
            <![CDATA[
                WITH RECURSIVE InvoiceHierarchy AS (
                SELECT i.id, i.customer_id AS customerId, c.fullname AS customerFullName, i.about, i.datecreated, i.dateupdated, i.descriptions,
                SFS AS totalInvoiceSum, PT AS totalInvoicePayments, i.previnvoiceid, CAST(0.0 AS double precision) AS prevInvoiceBalance, InvFwds.fwdFactorNum AS fwdInvoiceId
                FROM invoices i
                INNER JOIN customers c ON i.customer_id = c.id
                LEFT JOIN (SELECT COALESCE(ROUND(CASE WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue END), 0) AS SFS, i.Id AS SFN  FROM invoiceitems ii RIGHT JOIN invoices i ON ii.invoiceid = i.Id GROUP BY i.id, i.discounttype, i.discountvalue) AS InvSums ON InvSums.SFN = i.id
                LEFT JOIN (SELECT COALESCE(SUM(ip.payamount), 0) AS PT, i.id AS PFN FROM invoicepayments ip RIGHT JOIN invoices i ON ip.invoiceid = i.id GROUP BY i.id) AS InvPays ON InvPays.PFN = i.id
                LEFT JOIN (SELECT baseI.id AS FactorNum, prevI.id AS fwdFactorNum FROM invoices baseI LEFT JOIN invoices prevI ON baseI.id = prevI.previnvoiceid) AS InvFwds ON InvFwds.FactorNum = i.id
                WHERE i.id = InvSums.SFN AND i.id = PFN AND i.id = InvFwds.FactorNum AND i.previnvoiceid IS NULL

                UNION ALL

                SELECT i.id, i.customer_id AS customerId, c.fullname AS customerFullName, i.about, i.datecreated, i.dateupdated, i.descriptions,
                SFS AS totalInvoiceSum, PT AS totalInvoicePayments, i.previnvoiceid, prevInvoice.invBalance AS prevInvoiceBalance, InvFwds.fwdFactorNum AS fwdInvoiceId
                FROM invoices i
                INNER JOIN customers c ON i.customer_id = c.id
                LEFT JOIN (
                        SELECT i.id, InvSums.SFS - InvPays.PT AS invBalance
                        FROM invoices i
                        LEFT JOIN (SELECT COALESCE(ROUND(CASE WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue END), 0) AS SFS, i.Id AS SFN  FROM invoiceitems ii RIGHT JOIN invoices i ON ii.invoiceid = i.Id GROUP BY i.id, i.discounttype, i.discountvalue) AS InvSums ON InvSums.SFN = i.id
                        LEFT JOIN (SELECT COALESCE(SUM(ip.payamount), 0) AS PT, i.id AS PFN FROM invoicepayments ip RIGHT JOIN invoices i ON ip.invoiceid = i.id GROUP BY i.id) AS InvPays ON InvPays.PFN = i.id
                ) AS prevInvoice ON i.previnvoiceid = prevInvoice.id
                LEFT JOIN (SELECT ROUND(CASE WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue END) AS SFS, i.Id AS SFN  FROM invoiceitems ii RIGHT JOIN invoices i ON ii.invoiceid = i.Id GROUP BY i.id, i.discounttype, i.discountvalue) AS InvSums ON InvSums.SFN = i.id
                LEFT JOIN (SELECT COALESCE(SUM(ip.payamount), 0) AS PT, i.id AS PFN FROM invoicepayments ip RIGHT JOIN invoices i ON ip.invoiceid = i.id GROUP BY i.id) AS InvPays ON InvPays.PFN = i.id
                LEFT JOIN (SELECT baseI.id AS FactorNum, prevI.id AS fwdFactorNum FROM invoices baseI LEFT JOIN invoices prevI ON baseI.id = prevI.previnvoiceid) AS InvFwds ON InvFwds.FactorNum = i.id
                JOIN InvoiceHierarchy ih ON i.previnvoiceid = ih.id
                WHERE i.id = InvSums.SFN AND i.id = PFN AND i.id = InvFwds.FactorNum
                )
                SELECT * FROM InvoiceHierarchy ih
                WHERE
                    ((:customerId > 0 AND ih.customerId = :customerId) OR :customerId <= 0) AND
                    (ih.datecreated like :invoiceDate OR ih.dateupdated LIKE :invoiceDate) AND

                    (
                        (:invoiceStatus = 'BALANCED' AND ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance = 0) OR
                        (:invoiceStatus = 'DEPTOR' AND ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance > 0) OR
                        (:invoiceStatus = 'CREDITOR' AND ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance < 0) OR
                        (:invoiceStatus = 'OVERDUE' AND ih.fwdInvoiceId IS NULL AND ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance <> 0) OR
                        (:invoiceStatus = 'ALL')
                    ) AND

                    (
                        UPPER(ih.customerFullName) LIKE :searchText OR 
                        UPPER(ih.about) LIKE :searchText OR 
                        UPPER(ih.descriptions) LIKE :searchText
                    ) 
            ]]>
        </query>
    </named-native-query> -->

    <named-native-query name = "findPrevInvoiceList" result-set-mapping="InvoiceListMapping">
        <query>
            <![CDATA[
                WITH RECURSIVE InvoiceHierarchy AS (
                SELECT i.id, i.customer_id AS customerId, c.fullname AS customerFullName, i.about, i.datecreated, i.dateupdated, i.descriptions,
                SFS AS totalInvoiceSum, PT AS totalInvoicePayments, i.previnvoiceid, CAST(0.0 AS double precision) AS prevInvoiceBalance, InvFwds.fwdFactorNum AS fwdInvoiceId
                FROM invoices i
                INNER JOIN customers c ON i.customer_id = c.id
                LEFT JOIN (SELECT COALESCE(ROUND(CASE WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue END), 0) AS SFS, i.Id AS SFN  FROM invoiceitems ii RIGHT JOIN invoices i ON ii.invoiceid = i.Id GROUP BY i.id, i.discounttype, i.discountvalue) AS InvSums ON InvSums.SFN = i.id
                LEFT JOIN (SELECT COALESCE(SUM(ip.payamount), 0) AS PT, i.id AS PFN FROM invoicepayments ip RIGHT JOIN invoices i ON ip.invoiceid = i.id GROUP BY i.id) AS InvPays ON InvPays.PFN = i.id
                LEFT JOIN (SELECT baseI.id AS FactorNum, prevI.id AS fwdFactorNum FROM invoices baseI LEFT JOIN invoices prevI ON baseI.id = prevI.previnvoiceid) AS InvFwds ON InvFwds.FactorNum = i.id
                WHERE i.id = InvSums.SFN AND i.id = PFN AND i.id = InvFwds.FactorNum AND i.previnvoiceid IS NULL
                UNION ALL
                SELECT i.id, i.customer_id AS customerId, c.fullname AS customerFullName, i.about, i.datecreated, i.dateupdated, i.descriptions,
                SFS AS totalInvoiceSum, PT AS totalInvoicePayments, i.previnvoiceid, prevInvoice.invBalance AS prevInvoiceBalance, InvFwds.fwdFactorNum AS fwdInvoiceId
                FROM invoices i
                INNER JOIN customers c ON i.customer_id = c.id
                LEFT JOIN (
                        SELECT i.id, InvSums.SFS - InvPays.PT AS invBalance
                        FROM invoices i
                        LEFT JOIN (SELECT COALESCE(ROUND(CASE WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue END), 0) AS SFS, i.Id AS SFN  FROM invoiceitems ii RIGHT JOIN invoices i ON ii.invoiceid = i.Id GROUP BY i.id, i.discounttype, i.discountvalue) AS InvSums ON InvSums.SFN = i.id
                        LEFT JOIN (SELECT COALESCE(SUM(ip.payamount), 0) AS PT, i.id AS PFN FROM invoicepayments ip RIGHT JOIN invoices i ON ip.invoiceid = i.id GROUP BY i.id) AS InvPays ON InvPays.PFN = i.id
                ) AS prevInvoice ON i.previnvoiceid = prevInvoice.id
                LEFT JOIN (SELECT ROUND(CASE WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue END) AS SFS, i.Id AS SFN  FROM invoiceitems ii RIGHT JOIN invoices i ON ii.invoiceid = i.Id GROUP BY i.id, i.discounttype, i.discountvalue) AS InvSums ON InvSums.SFN = i.id
                LEFT JOIN (SELECT COALESCE(SUM(ip.payamount), 0) AS PT, i.id AS PFN FROM invoicepayments ip RIGHT JOIN invoices i ON ip.invoiceid = i.id GROUP BY i.id) AS InvPays ON InvPays.PFN = i.id
                LEFT JOIN (SELECT baseI.id AS FactorNum, prevI.id AS fwdFactorNum FROM invoices baseI LEFT JOIN invoices prevI ON baseI.id = prevI.previnvoiceid) AS InvFwds ON InvFwds.FactorNum = i.id
                JOIN InvoiceHierarchy ih ON i.previnvoiceid = ih.id
                WHERE i.id = InvSums.SFN AND i.id = PFN AND i.id = InvFwds.FactorNum
                )
                SELECT * FROM InvoiceHierarchy ih
                WHERE
                    ih.id < :invoiceId AND
                    ih.customerId = :customerId AND
                    ih.fwdInvoiceId IS NULL AND
                    ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance <> 0
            ]]>
        </query>
    </named-native-query>
    
    <sql-result-set-mapping name="InvoiceListMapping">
        <constructor-result target-class="com.safadana.AvazehRetailManagement.Models.InvoiceListModel">
            <column name="id" type="java.lang.Long"/>
            <column name="customerId" type="java.lang.Long"/>
            <column name="customerFullName" type="java.lang.String"/>
            <column name="about" type="java.lang.String"/>
            <column name="dateCreated" type="java.lang.String"/>
            <column name="dateUpdated" type="java.lang.String"/>
            <column name="descriptions" type="java.lang.String"/>
            <column name="totalInvoiceSum" type="double"/>
            <column name="totalInvoicePayments" type="double"/>
            <column name="prevInvoiceId" type="java.lang.Long"/>
            <column name="prevInvoiceBalance" type="double"/>
            <column name="fwdInvoiceId" type="java.lang.Long"/>
        </constructor-result>
    </sql-result-set-mapping>
</entity-mappings>
