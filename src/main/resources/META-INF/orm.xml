<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_2.xsd"
                version="2.2">
    <named-query name="customerBalance">
        <query>
            <![CDATA[
                SELECT SUM(result)
                FROM (
                    SELECT 
                        CASE 
                            WHEN i.discountType = 0 THEN 
                                COALESCE(SUM(ii.countValue * ii.sellPrice), 0) - (i.discountValue / 100 * SUM(ii.countValue * ii.sellPrice)) - COALESCE(SUM(ip.payAmount), 0)
                            ELSE 
                                COALESCE(SUM(ii.countValue * ii.sellPrice), 0) - i.discountValue - COALESCE(SUM(ip.payAmount), 0)
                        END as result
                    FROM InvoiceModel i 
                    LEFT JOIN i.customer c
                    LEFT JOIN i.items ii
                    LEFT JOIN i.payments ip
                    WHERE c.id = :cId
                    GROUP BY i.id
                ) as subquery
            ]]>
        </query>
    </named-query>

    <named-native-query name = "findInvoiceListByMany" result-set-mapping="InvoiceListMapping">
        <query>
            <![CDATA[
                WITH RECURSIVE InvoiceHierarchy AS (
                SELECT i.id, i.customer_id AS customerId, c.fullname AS customerFullName, i.about, i.datecreated, i.dateupdated, i.descriptions,
                COALESCE(SFS, 0) AS totalInvoiceSum, COALESCE(PT, 0) AS totalInvoicePayments, i.previnvoiceid, CAST(0.0 AS double precision) AS prevInvoiceBalance, InvFwds.fwdFactorNum AS fwdInvoiceId
                FROM invoices i
                INNER JOIN customers c ON i.customer_id = c.id
                LEFT JOIN (SELECT COALESCE(ROUND(CASE WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue END), 0) AS SFS, i.Id AS SFN  FROM invoiceitems ii RIGHT JOIN invoices i ON ii.invoiceid = i.Id GROUP BY i.id, i.discounttype, i.discountvalue) AS InvSums ON InvSums.SFN = i.id
                LEFT JOIN (SELECT SUM(ip.payamount) AS PT, ip.invoiceid AS PFN FROM invoicepayments ip GROUP BY ip.invoiceid) AS InvPays ON InvPays.PFN = i.id
                LEFT JOIN (SELECT baseI.id AS FactorNum, prevI.id AS fwdFactorNum FROM invoices baseI LEFT JOIN invoices prevI ON baseI.id = prevI.previnvoiceid) AS InvFwds ON InvFwds.FactorNum = i.id
                WHERE i.previnvoiceid IS NULL

                UNION ALL

                SELECT i.id, i.customer_id AS customerId, c.fullname AS customerFullName, i.about, i.datecreated, i.dateupdated, i.descriptions,
                COALESCE(SFS, 0) AS totalInvoiceSum, COALESCE(PT, 0) AS totalInvoicePayments, i.previnvoiceid, ih.prevInvoiceBalance + ih.totalInvoiceSum - ih.totalInvoicePayments AS prevInvoiceBalance, InvFwds.fwdFactorNum AS fwdInvoiceId
                FROM invoices i
                INNER JOIN customers c ON i.customer_id = c.id
                LEFT JOIN (SELECT ROUND(CASE WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue END) AS SFS, i.Id AS SFN  FROM invoiceitems ii RIGHT JOIN invoices i ON ii.invoiceid = i.Id GROUP BY i.id, i.discounttype, i.discountvalue) AS InvSums ON InvSums.SFN = i.id
                LEFT JOIN (SELECT SUM(ip.payamount) AS PT, ip.invoiceid AS PFN FROM invoicepayments ip GROUP BY ip.invoiceid) AS InvPays ON InvPays.PFN = i.id
                LEFT JOIN (SELECT baseI.id AS FactorNum, prevI.id AS fwdFactorNum FROM invoices baseI LEFT JOIN invoices prevI ON baseI.id = prevI.previnvoiceid) AS InvFwds ON InvFwds.FactorNum = i.id
                JOIN InvoiceHierarchy ih ON i.previnvoiceid = ih.id
                )
                SELECT * FROM InvoiceHierarchy ih
                WHERE
                    ((:customerId > 0 AND ih.customerId = :customerId) OR :customerId <= 0) AND
                    (ih.datecreated like :invoiceDate OR ih.dateupdated LIKE :invoiceDate) AND

                    (
                        (:invoiceStatus = 'BALANCED' AND ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance = 0) OR
                        (:invoiceStatus = 'DEPTOR' AND ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance > 0) OR
                        (:invoiceStatus = 'CREDITOR' AND ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance < 0) OR
                        (:invoiceStatus = 'OVERDUE' AND ih.fwdInvoiceId IS NULL AND ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance <> 0) OR
                        (:invoiceStatus = 'ALL')
                    ) AND

                    (
                        CAST(ih.id AS VARCHAR) LIKE :searchText OR 
                        UPPER(ih.customerFullName) LIKE :searchText OR 
                        UPPER(ih.about) LIKE :searchText OR 
                        UPPER(ih.descriptions) LIKE :searchText
                    )
                ORDER BY ih.id DESC
            ]]>
        </query>
    </named-native-query>

    <named-native-query name = "findPrevInvoiceList" result-set-mapping="InvoiceListMapping">
        <query>
            <![CDATA[
                WITH RECURSIVE InvoiceHierarchy AS (
                SELECT i.id, i.customer_id AS customerId, c.fullname AS customerFullName, i.about, i.datecreated, i.dateupdated, i.descriptions,
                COALESCE(SFS, 0) AS totalInvoiceSum, COALESCE(PT, 0) AS totalInvoicePayments, i.previnvoiceid, CAST(0.0 AS double precision) AS prevInvoiceBalance, InvFwds.fwdFactorNum AS fwdInvoiceId
                FROM invoices i
                INNER JOIN customers c ON i.customer_id = c.id
                LEFT JOIN (SELECT COALESCE(ROUND(CASE WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue END), 0) AS SFS, i.Id AS SFN  FROM invoiceitems ii RIGHT JOIN invoices i ON ii.invoiceid = i.Id GROUP BY i.id, i.discounttype, i.discountvalue) AS InvSums ON InvSums.SFN = i.id
                LEFT JOIN (SELECT SUM(ip.payamount) AS PT, ip.invoiceid AS PFN FROM invoicepayments ip GROUP BY ip.invoiceid) AS InvPays ON InvPays.PFN = i.id
                LEFT JOIN (SELECT baseI.id AS FactorNum, prevI.id AS fwdFactorNum FROM invoices baseI LEFT JOIN invoices prevI ON baseI.id = prevI.previnvoiceid) AS InvFwds ON InvFwds.FactorNum = i.id
                WHERE i.previnvoiceid IS NULL

                UNION ALL

                SELECT i.id, i.customer_id AS customerId, c.fullname AS customerFullName, i.about, i.datecreated, i.dateupdated, i.descriptions,
                COALESCE(SFS, 0) AS totalInvoiceSum, COALESCE(PT, 0) AS totalInvoicePayments, i.previnvoiceid, ih.prevInvoiceBalance + ih.totalInvoiceSum - ih.totalInvoicePayments AS prevInvoiceBalance, InvFwds.fwdFactorNum AS fwdInvoiceId
                FROM invoices i
                INNER JOIN customers c ON i.customer_id = c.id
                LEFT JOIN (SELECT ROUND(CASE WHEN i.discounttype = 0 THEN SUM(ii.countvalue * ii.sellprice) - (i.discountvalue / 100 * SUM(ii.countvalue * ii.sellprice)) WHEN i.discounttype = 1 THEN SUM(ii.countvalue * ii.sellprice) - i.discountvalue END) AS SFS, i.Id AS SFN  FROM invoiceitems ii RIGHT JOIN invoices i ON ii.invoiceid = i.Id GROUP BY i.id, i.discounttype, i.discountvalue) AS InvSums ON InvSums.SFN = i.id
                LEFT JOIN (SELECT SUM(ip.payamount) AS PT, ip.invoiceid AS PFN FROM invoicepayments ip GROUP BY ip.invoiceid) AS InvPays ON InvPays.PFN = i.id
                LEFT JOIN (SELECT baseI.id AS FactorNum, prevI.id AS fwdFactorNum FROM invoices baseI LEFT JOIN invoices prevI ON baseI.id = prevI.previnvoiceid) AS InvFwds ON InvFwds.FactorNum = i.id
                JOIN InvoiceHierarchy ih ON i.previnvoiceid = ih.id
                )
                SELECT * FROM InvoiceHierarchy ih
                WHERE
                    ih.id < :invoiceId AND
                    ih.customerId = (SELECT i.customer_id FROM invoices i WHERE i.id = :invoiceId) AND
                    ih.fwdInvoiceId IS NULL AND
                    ih.totalInvoiceSum - ih.totalInvoicePayments + ih.prevInvoiceBalance <> 0
                ORDER BY ih.id DESC
            ]]>
        </query>
    </named-native-query>

    <named-native-query name = "loadSingleInvoiceSpecs" result-set-mapping="singleInvoiceSpecsMapping">
        <query>
            <![CDATA[
                SELECT i.id, i.about, i.dateCreated, i.dateUpdated, i.discountType, i.discountValue, i.descriptions, i.prevInvoiceId,
                calcinvoiceprevbalance(:invoiceId) AS prevInvoiceBalance, InvFwds.fwdFactorNum AS fwdInvoiceId
                FROM invoices i
                LEFT JOIN (SELECT baseI.id AS FactorNum, prevI.id AS fwdFactorNum FROM invoices baseI LEFT JOIN invoices prevI ON baseI.id = prevI.previnvoiceid) AS InvFwds ON InvFwds.FactorNum = i.id
                WHERE i.id = :invoiceId
            ]]>
        </query>
    </named-native-query>

    <named-native-query name = "loadCustomerByInvoiceId" result-set-mapping="singleCustomerMapping">
        <query>
            <![CDATA[
                SELECT c.* FROM customers c JOIN invoices i ON i.customer_id = c.id WHERE i.id = :invoiceId
            ]]>
        </query>
    </named-native-query>
    
    <sql-result-set-mapping name="InvoiceListMapping">
        <constructor-result target-class="com.safadana.AvazehRetailManagement.Models.InvoiceListModel">
            <column name="id" type="java.lang.Long"/>
            <column name="customerId" type="java.lang.Long"/>
            <column name="customerFullName" type="java.lang.String"/>
            <column name="about" type="java.lang.String"/>
            <column name="dateCreated" type="java.lang.String"/>
            <column name="dateUpdated" type="java.lang.String"/>
            <column name="descriptions" type="java.lang.String"/>
            <column name="totalInvoiceSum" type="java.lang.Double"/>
            <column name="totalInvoicePayments" type="java.lang.Double"/>
            <column name="prevInvoiceId" type="java.lang.Long"/>
            <column name="prevInvoiceBalance" type="java.lang.Double"/>
            <column name="fwdInvoiceId" type="java.lang.Long"/>
        </constructor-result>
    </sql-result-set-mapping>
    
    <sql-result-set-mapping name="singleInvoiceSpecsMapping">
        <constructor-result target-class="com.safadana.AvazehRetailManagement.Models.InvoiceModel_DTO">
            <column name="id" type="java.lang.Long"/>
            <column name="about" type="java.lang.String"/>
            <column name="dateCreated" type="java.lang.String"/>
            <column name="dateUpdated" type="java.lang.String"/>
            <column name="discountType" type="java.lang.Integer"/>
            <column name="discountValue" type="java.lang.String"/>
            <column name="descriptions" type="java.lang.String"/>
            <column name="prevInvoiceId" type="java.lang.Long"/>
            <column name="prevInvoiceBalance" type="java.lang.Double"/>
            <column name="fwdInvoiceId" type="java.lang.Long"/>
        </constructor-result>
    </sql-result-set-mapping>
    
    <sql-result-set-mapping name="singleCustomerMapping">
        <constructor-result target-class="com.safadana.AvazehRetailManagement.Models.CustomerModel">
            <column name="id" type="java.lang.Long"/>
            <column name="fullName" type="java.lang.String"/>
            <column name="companyName" type="java.lang.String"/>
            <column name="emailAddress" type="java.lang.String"/>
            <column name="postAddress" type="java.lang.String"/>
            <column name="dateJoined" type="java.lang.String"/>
            <column name="descriptions" type="java.lang.String"/>
            <column name="phoneNumber" type="java.lang.String"/>
        </constructor-result>
    </sql-result-set-mapping>
</entity-mappings>
